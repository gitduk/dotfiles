#!/usr/bin/env bash

##############
### config ###
##############

declare -A CONFIG=(
  [icon]="ó°Œ "
  [venv_path]=""
  [dir]=""
  [current_real]=""
  [use_color]="false"
)

declare -a VENV_NAMES=(".venv" "venv")

declare -A COLOR=(
  [reset]=""
  [green]=""
  [yellow]=""
  [red]=""
  [blue]=""
  [bold]=""
  [bold_off]=""
)

# log with colored level + message
logger() {
  local level="$1"
  shift

  local color_reset="${COLOR[reset]}"
  local color_level=""

  case "$level" in
  INFO) color_level="${COLOR[blue]}" ;;
  OK) color_level="${COLOR[green]}" ;;
  WARN) color_level="${COLOR[yellow]}" ;;
  ERROR) color_level="${COLOR[red]}" ;;
  *) color_level="" ;;
  esac

  printf '[%s%s%s] %s\n' \
    "$color_level" "$level" "$color_reset" \
    "$*"
}

############
### main ###
############

# Colors (ANSI)
if [[ -t 1 && -z "$NO_COLOR" ]]; then
  CONFIG[use_color]="true"
fi

if [[ "${CONFIG[use_color]}" == "true" ]]; then
  COLOR[reset]=$'\e[0m'
  COLOR[green]=$'\e[32m'
  COLOR[yellow]=$'\e[33m'
  COLOR[red]=$'\e[31m'
  COLOR[blue]=$'\e[34m'
  COLOR[bold]=$'\e[1m'
  COLOR[bold_off]=$'\e[22m'
fi

# Derive a display name from venv path.
_senv_name_from_path() {
  local p="$1"
  local base
  base=$(basename "$p")
  if [[ "$base" == ".venv" || "$base" == "venv" ]]; then
    basename "$(dirname "$p")"
  else
    echo "$base"
  fi
}

# Main logic
if [[ -n "$1" && -d "$1" ]]; then
  if [[ -f "$1/bin/activate" ]]; then
    CONFIG[venv_path]="$1"
  else
    local arg_name
    arg_name=$(basename "$1")
    logger ERROR "${CONFIG[icon]} Not a valid Python virtual environment: $arg_name"
    return 1
  fi
else
  CONFIG[dir]=$PWD
  while [[ "${CONFIG[dir]}" != "/" ]]; do
    for name in "${VENV_NAMES[@]}"; do
      if [[ -f "${CONFIG[dir]}/$name/bin/activate" ]]; then
        CONFIG[venv_path]="${CONFIG[dir]}/$name"
        break 2
      fi
    done
    for candidate in "${CONFIG[dir]}"/*; do
      if [[ -f "$candidate/pyvenv.cfg" && -f "$candidate/bin/activate" ]]; then
        CONFIG[venv_path]="$candidate"
        break 2
      fi
    done
    CONFIG[dir]=$(dirname "${CONFIG[dir]}")
  done
fi

if [[ -n "${CONFIG[venv_path]}" ]]; then
  # Resolve real paths for reliable comparison
  target_real=$(cd "${CONFIG[venv_path]}" 2>/dev/null && pwd -P)

  if [[ -n "$VIRTUAL_ENV" ]]; then
    current_real=$(cd "$VIRTUAL_ENV" 2>/dev/null && pwd -P)

    if [[ "$current_real" == "$target_real" ]]; then
      env_name=$(_senv_name_from_path "$target_real")
      logger INFO "${CONFIG[icon]} Already in environment: ${COLOR[bold]}$env_name${COLOR[bold_off]}"
      return 0
    fi

    # Deactivate current environment if possible before switching
    if typeset -f deactivate >/dev/null 2>&1; then
      deactivate
    else
      logger WARN "${CONFIG[icon]} Could not auto-deactivate current environment; switching anyway."
    fi
  fi

  # Activate target environment
  # shellcheck disable=SC1090
  source "${CONFIG[venv_path]}/bin/activate"
  if [[ -n "$current_real" ]]; then
    old_name=$(_senv_name_from_path "$current_real")
    new_name=$(_senv_name_from_path "$target_real")
    logger OK "${CONFIG[icon]} Switched environment: ${COLOR[bold]}${old_name:-unknown}${COLOR[bold_off]} -> ${COLOR[bold]}$new_name${COLOR[bold_off]}"
  else
    name=$(_senv_name_from_path "$target_real")
    logger OK "${CONFIG[icon]} Activated environment: ${COLOR[bold]}$name${COLOR[bold_off]}"
  fi
else
  logger ERROR "${CONFIG[icon]} No virtual environment found. Create .venv in project or pass a path: senv /path/to/venv"
  return 1
fi

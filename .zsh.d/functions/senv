#!/usr/bin/env bash

icon="ó°Œ "

function senv() {
  local venv_path=""
  local dir=""
  local current_real=""
  local target_real=""
  local venv_names=(".venv" "venv")

  # Colors and messaging helpers (ANSI, not prompt escapes)
  local use_color="0"
  if [[ -t 1 && -z "$NO_COLOR" ]]; then
    use_color="1"
  fi
  local c_reset="" c_green="" c_yellow="" c_red="" c_blue="" c_bold="" c_bold_off=""
  if [[ "$use_color" == "1" ]]; then
    c_reset=$'\e[0m'
    c_green=$'\e[32m'
    c_yellow=$'\e[33m'
    c_red=$'\e[31m'
    c_blue=$'\e[34m'
    c_bold=$'\e[1m'
    c_bold_off=$'\e[22m'
  fi
  _senv_info() { print -r -- "${c_blue}${icon} $*${c_reset}"; }
  _senv_ok() { print -r -- "${c_green}${icon} $*${c_reset}"; }
  _senv_warn() { print -r -- "${c_yellow}${icon} $*${c_reset}"; }
  _senv_err() { print -r -- "${c_red}${icon} $*${c_reset}"; }

main() {
  if [[ -n "$1" && -d "$1" ]]; then
    if [[ -f "$1/bin/activate" ]]; then
      CONFIG[venv_path]="$1"
    else
      local arg_name
      arg_name=$(basename "$1")
      logger ERROR "${CONFIG[icon]} Not a valid Python virtual environment: $arg_name"
      return 1
    fi
  else
    CONFIG[dir]=$PWD
    while [[ "${CONFIG[dir]}" != "/" ]]; do
      for name in "${VENV_NAMES[@]}"; do
        if [[ -f "${CONFIG[dir]}/$name/bin/activate" ]]; then
          CONFIG[venv_path]="${CONFIG[dir]}/$name"
          break 2
        fi
      done
      for candidate in "${CONFIG[dir]}"/*; do
        if [[ -f "$candidate/pyvenv.cfg" && -f "$candidate/bin/activate" ]]; then
          CONFIG[venv_path]="$candidate"
          break 2
        fi
      done
      CONFIG[dir]=$(dirname "${CONFIG[dir]}")
    done
  fi
  
  if [[ -n "${CONFIG[venv_path]}" ]]; then
    # Resolve real paths for reliable comparison
    target_real=$(cd "${CONFIG[venv_path]}" 2>/dev/null && pwd -P)
  
    if [[ -n "$VIRTUAL_ENV" ]]; then
      current_real=$(cd "$VIRTUAL_ENV" 2>/dev/null && pwd -P)
  
      if [[ "$current_real" == "$target_real" ]]; then
        env_name=$(_senv_name_from_path "$target_real")
        logger INFO "${CONFIG[icon]} Already in environment: ${COLOR[bold]}$env_name${COLOR[bold_off]}"
        return 0
      fi
  
      # Deactivate current environment if possible before switching
      if typeset -f deactivate >/dev/null 2>&1; then
        deactivate
      else
        logger WARN "${CONFIG[icon]} Could not auto-deactivate current environment; switching anyway."
      fi
    fi
  
    # Activate target environment
    # shellcheck disable=SC1090
    source "${CONFIG[venv_path]}/bin/activate"
    if [[ -n "$current_real" ]]; then
      old_name=$(_senv_name_from_path "$current_real")
      new_name=$(_senv_name_from_path "$target_real")
      logger OK "${CONFIG[icon]} Switched environment: ${COLOR[bold]}${old_name:-unknown}${COLOR[bold_off]} -> ${COLOR[bold]}$new_name${COLOR[bold_off]}"
    else
      name=$(_senv_name_from_path "$target_real")
      logger OK "${CONFIG[icon]} Activated environment: ${COLOR[bold]}$name${COLOR[bold_off]}"
    fi
  else
    logger ERROR "${CONFIG[icon]} No virtual environment found. Create .venv in project or pass a path: senv /path/to/venv"
    return 1
  fi
}

main "$@"

#!/usr/bin/env bash

SCRIPT_NAME=$(basename "$0")

##############
### config ###
##############

declare -A COLOR=(
  [reset]=""
  [green]=""
  [yellow]=""
  [red]=""
  [blue]=""
  [bold]=""
  [bold_off]=""
)

if [[ -t 1 && -z "$NO_COLOR" ]]; then
  COLOR[reset]=$'\e[0m'
  COLOR[green]=$'\e[32m'
  COLOR[yellow]=$'\e[33m'
  COLOR[red]=$'\e[31m'
  COLOR[blue]=$'\e[34m'
  COLOR[bold]=$'\e[1m'
  COLOR[bold_off]=$'\e[22m'
fi

usage() {
  cat << EOF
Usage: $SCRIPT_NAME [OPTIONS] [NAME]

Set or manage tmux pane names:
  $SCRIPT_NAME "my-name"     Set current pane name
  $SCRIPT_NAME PANE_ID NAME  Set specific pane name (shorthand)
  $SCRIPT_NAME -d            Delete current pane name  
  $SCRIPT_NAME -D            Delete all pane names
  $SCRIPT_NAME -l            List all panes with names
  $SCRIPT_NAME -h|--help     Show this help

Examples:
  $SCRIPT_NAME "web-server"
  $SCRIPT_NAME -t 1 "database" 
  $SCRIPT_NAME -u
EOF
}

logger() {
  local level="$1"
  shift

  local color_reset="${COLOR[reset]}"
  local color_level=""

  case "$level" in
  INFO) color_level="${COLOR[blue]}" ;;
  OK) color_level="${COLOR[green]}" ;;
  WARN) color_level="${COLOR[yellow]}" ;;
  ERROR) color_level="${COLOR[red]}" ;;
  *) color_level="" ;;
  esac

  printf '[%s%s%s] %s\n' "$color_level" "$level" "$color_reset" "$*"
}

############
### main ###
############

check_tmux() {
  if [[ -z "$TMUX" ]]; then
    logger ERROR "Not in a tmux session"
    return 1
  fi
}

# 列出所有 pane 及其名称
list_panes() {
  echo "Panes in current window:"
  tmux list-panes -F "#{pane_index}: #{pane_current_command} #{?@pane_name,(#{@pane_name}),}"
}

# 验证给定的 pane ID 是否存在于当前 tmux 窗口
validate_pane() {
  local pane_id="$1"
  
  if [[ ! "$pane_id" =~ ^[0-9]+$ ]]; then
    logger ERROR "Invalid pane ID: '$pane_id' (must be a number)"
    return 1
  fi
  
  if ! tmux list-panes -F "#{pane_index}" | grep -q "^${pane_id}$"; then
    logger ERROR "Pane $pane_id does not exist"
    return 1
  fi
  
  return 0
}

main() {
  check_tmux || return 1
  
  case "$1" in
  -h)
    usage
    ;;
  -d)
    if [[ -n "$2" ]]; then
      # 删除指定 pane 的 name
      local pane_id="$2"
      if validate_pane "$pane_id"; then
        local pane_name
        pane_name=$(tmux show -p -t "$pane_id" @pane_name 2>/dev/null | cut -d' ' -f2-)
        if [[ -n "$pane_name" ]]; then
          tmux set -u -p -t "$pane_id" @pane_name
          logger OK "Unset pane $pane_id \"$pane_name\""
        else
          logger WARN "Pane $pane_id has no name set"
        fi
      fi
    else
      # 删除当前 pane 的 name
      local current_name
      current_name=$(tmux show -p @pane_name 2>/dev/null | cut -d' ' -f2-)
      if [[ -n "$current_name" ]]; then
        tmux set -u -p @pane_name
        logger OK "Unset current pane \"$current_name\""
      else
        logger WARN "Current pane has no name set"
      fi
    fi
    ;;
  -D)
    local count=0 unset_names=()
    for pane_id in $(tmux list-panes -F "#{pane_index}"); do
      local pane_name
      pane_name=$(tmux show -p -t "$pane_id" @pane_name 2>/dev/null | cut -d' ' -f2-)
      if [[ -n "$pane_name" ]]; then
        tmux set -u -p -t "$pane_id" @pane_name
        unset_names+=("pane $pane_id: $pane_name")
        ((count++))
      fi
    done
    if [[ $count -gt 0 ]]; then
      logger OK "Unset $count pane(s):"
      printf "  %s\n" "${unset_names[@]}"
    else
      logger INFO "No pane names to unset"
    fi
    ;;
  -l | --list)
    list_panes
    ;;
  "")
    logger ERROR "Name is required"
    usage
    return 1
    ;;
  -*)
    logger ERROR "Unknown option '$1'"
    usage
    return 1
    ;;
  *)
    if [[ "$1" =~ ^[0-9]+$ && $# -ge 2 ]]; then
      local pane_id="$1" name="$2"
      if validate_pane "$pane_id"; then
        tmux set -p -t "$pane_id" @pane_name "$name"
        logger OK "Set pane $pane_id to \"$name\""
      fi
    elif [[ -n "$1" ]]; then
      tmux set -p @pane_name "$1"
      logger OK "Set current pane to \"$1\""
    else
      logger ERROR "Empty name not allowed"
      return 1
    fi
    ;;
  esac
}

main "$@"

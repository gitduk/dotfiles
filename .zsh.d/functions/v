#!/usr/bin/env bash

# Set a default editor if $EDITOR is not set
set_default_editor() {
  local editors=("nvim" "hx" "vim" "vi")
  local editor

  for editor in "${editors[@]}"; do
    if command -v "$editor" &>/dev/null; then
      export EDITOR="$editor"
      return
    fi
  done

  echo "Error: No suitable editor found. Please install one of (${editors[*]})." >&2
  return 1
}

# Verify editor command exists
verify_editor() {
  if ! command -v "$EDITOR" &>/dev/null; then
    echo "Error: Configured editor '$EDITOR' not found in PATH." >&2
    return 1
  fi
}

# Function to edit a file or open the editor
edit_file() {
  local file_path=$1
  local parent_dir

  # Handle no-argument case
  if [[ -z "$file_path" ]]; then
    if [[ -w "." ]]; then
      "$EDITOR"
    else
      echo "Error: Current directory is not writable." >&2
      return 1
    fi
    return
  fi

  # Resolve absolute path for better permission checks
  file_path=${file_path:A}

  # Existing file handling
  if [[ -f "$file_path" ]]; then
    if [[ -w "$file_path" ]]; then
      "$EDITOR" "$file_path"
    else
      sudo --preserve-env=EDITOR "$EDITOR" "$file_path"
    fi
    return
  fi

  # New file handling
  parent_dir=$(dirname -- "$file_path")
  if [[ -w "$parent_dir" ]]; then
    "$EDITOR" "$file_path"
  else
    sudo --preserve-env=EDITOR "$EDITOR" "$file_path"
  fi
}

############
### main ###
############

if [[ -z "$EDITOR" ]]; then
  set_default_editor
  verify_editor
fi

if (($# > 1)); then
  echo "Error: Too many arguments. Usage: ${0:t} [FILE]" >&2
  return 2
fi

edit_file "${@}"


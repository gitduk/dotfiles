#!/usr/bin/env zsh

# 显示使用说明
show_usage() {
  cat << 'EOF'
Usage: pane-name [OPTIONS] [NAME]

Set or manage tmux pane names:
  pane-name "my-name"     Set current pane name
  pane-name PANE_ID NAME  Set specific pane name (shorthand)
  pane-name -u            Unset current pane name  
  pane-name -U            Unset all pane names
  pane-name -t ID NAME    Set specific pane name
  pane-name -l            List all panes with names
  pane-name -h|--help     Show this help

Examples:
  pane-name "web-server"
  pane-name -t 1 "database" 
  pane-name -u
EOF
}

# 检查是否在 tmux 会话中
check_tmux() {
  if [[ -z "$TMUX" ]]; then
    echo "Error: Not in a tmux session" >&2
    return 1
  fi
}

# 列出所有 pane 及其名称
list_panes() {
  echo "Panes in current window:"
  tmux list-panes -F "#{pane_index}: #{pane_current_command} #{?@pane_name,(#{@pane_name}),}"
}

# 验证 pane ID 是否存在
validate_pane() {
  local pane_id="$1"
  if ! tmux list-panes -F "#{pane_index}" | grep -q "^${pane_id}$"; then
    echo "Error: Pane $pane_id does not exist" >&2
    return 1
  fi
}

# 主要逻辑
main() {
  check_tmux

  case "$1" in
    -h|--help)
      show_usage
      ;;
    -u)
      local current_name=$(tmux show -p @pane_name 2>/dev/null | cut -d' ' -f2-)
      if [[ -n "$current_name" ]]; then
        tmux set -u -p @pane_name
        echo "✓ Unset current pane name '$current_name'"
      else
        echo "Current pane has no name set"
      fi
      ;;
    -U)
      local count=0
      local unset_names=()
      for pane_id in $(tmux list-panes -F "#{pane_index}"); do
        local pane_name=$(tmux show -p -t "$pane_id" @pane_name 2>/dev/null | cut -d' ' -f2-)
        if [[ -n "$pane_name" ]]; then
          tmux set -u -p -t "$pane_id" @pane_name
          unset_names+=("pane $pane_id: '$pane_name'")
          ((count++))
        fi
      done

      if [[ $count -gt 0 ]]; then
        echo "✓ Unset $count pane name(s):"
        printf "  %s\n" "${unset_names[@]}"
      else
        echo "No pane names to unset"
      fi
      ;;
    -l|--list)
      list_panes
      ;;
    -t)
      if [[ $# -lt 3 ]]; then
        echo "Error: -t requires pane ID and name" >&2
        echo "Usage: $0 -t PANE_ID NAME" >&2
        return 1
      fi

      local pane_id="$2"
      local name="$3"

      if validate_pane "$pane_id"; then
        tmux set -p -t "$pane_id" @pane_name "$name"
        echo "✓ Set pane $pane_id name to '$name'"
      fi
      ;;
    "")
      echo "Error: Name is required" >&2
      show_usage
      return 1
      ;;
    -*)
      echo "Error: Unknown option '$1'" >&2
      show_usage
      return 1
      ;;
    *)
      # 检查第一个参数是否是数字 (pane ID)
      if [[ "$1" =~ ^[0-9]+$ && $# -ge 2 ]]; then
        # 格式: pane-name PANE_ID NAME
        local pane_id="$1"
        local name="$2"

        if validate_pane "$pane_id"; then
            tmux set -p -t "$pane_id" @pane_name "$name"
            echo "✓ Set pane $pane_id name to '$name'"
        fi
      elif [[ -n "$1" ]]; then
        # 格式: pane-name NAME (设置当前 pane)
        tmux set -p @pane_name "$1"
        echo "✓ Set current pane name to '$1'"
      else
        echo "Error: Empty name not allowed" >&2
        return 1
      fi
      ;;
  esac
}

# 执行主函数
main "$@"
